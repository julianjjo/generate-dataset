{"text": "# Cómo cocinar pasta carbonara perfecta\n\nLa pasta carbonara es uno de los platos más icónicos de la cocina italiana. Esta receta tradicional romana requiere pocos ingredientes pero técnica precisa.\n\n## Ingredientes necesarios:\n- 400g de spaghetti o tonnarelli\n- 200g de guanciale (o panceta)\n- 4 huevos enteros + 2 yemas\n- 100g de queso pecorino romano rallado\n- Pimienta negra recién molida\n- Sal para el agua\n\n## Pasos detallados:\n\n1. **Preparar el guanciale**: Corta el guanciale en bastones de 1cm. No uses aceite, ya que liberará su propia grasa.\n\n2. **Preparar la crema**: En un bol, mezcla los huevos, yemas, pecorino y abundante pimienta negra. Debe quedar cremoso.\n\n3. **Cocinar la pasta**: Hierve agua con sal abundante. Cocina la pasta al dente según instrucciones del paquete.\n\n4. **Dorar el guanciale**: Mientras tanto, cocina el guanciale a fuego medio hasta que esté dorado y crujiente.\n\n5. **Combinar**: Escurre la pasta reservando un vaso del agua de cocción. Mezcla inmediatamente con el guanciale caliente.\n\n6. **Crear la crema**: Fuera del fuego, añade la mezcla de huevos removiendo constantemente. Si espesa demasiado, añade agua de cocción.\n\n## Consejos importantes:\n- Nunca uses nata o crema\n- El calor residual cocinará los huevos\n- Sirve inmediatamente\n- El pecorino es esencial, no lo sustituyas por parmesano\n\nLa carbonara perfecta es cremosa, no seca ni con huevos cuajados. ¡Buon appetito!"}
{"text": "**El Laboratorio del Tiempo**\n\nDr. Elena Varga ajustó los controles del Cronómetro Cuántico por última vez. Después de veinte años de investigación, finalmente había logrado crear una máquina del tiempo funcional. El laboratorio subterráneo bullía con la energía de los generadores de plasma, creando un zumbido constante que se había convertido en la banda sonora de su obsesión.\n\n\"Computadora, iniciar secuencia temporal,\" murmuró Elena, sus manos temblando ligeramente sobre el panel de control. Las luces del laboratorio parpadearon mientras la máquina cobraba vida.\n\nUn portal azul brillante se abrió ante ella, mostrando destellos de diferentes épocas: dinosaurios en selvas prehistóricas, pirámides egipcias en construcción, ciudades futuristas flotando en el cielo. El poder era embriagador.\n\nPero cuando Elena se preparó para dar el primer paso, una voz familiar resonó detrás de ella.\n\n\"No puedes hacerlo, Elena.\"\n\nSe volvió para encontrar a una versión mayor de sí misma, con canas y cicatrices que no reconocía.\n\n\"¿Quién eres?\" susurró Elena, aunque en el fondo ya conocía la respuesta.\n\n\"Soy tú, treinta años en el futuro. Vine para advertirte: cada viaje que hagas creará una paradoja temporal que destruirá nuestra realidad. He visto lo que sucede. Universos enteros colapsan.\"\n\nElena miró el portal, luego a su yo futuro. \"Pero... todo mi trabajo...\"\n\n\"No fue en vano. Nuestro descubrimiento debe permanecer aquí, como guardián del tiempo. Somos las protectoras de la línea temporal.\"\n\nCon un suspiro profundo, Elena apagó la máquina. El portal se desvaneció, pero su propósito acababa de comenzar."}
{"text": "**Entrevista de trabajo en TechNova Solutions**\n\n*Ana Rodríguez entra a la oficina. El entrevistador, Carlos Méndez, se levanta para recibirla.*\n\n**Carlos:** Buenos días, Ana. Gracias por venir. Soy Carlos Méndez, director de recursos humanos. Por favor, toma asiento.\n\n*Ana se sienta y coloca su carpeta sobre la mesa.*\n\n**Ana:** Buenos días, Carlos. Encantada de conocerte. He investigado bastante sobre TechNova y estoy muy emocionada por esta oportunidad.\n\n**Carlos:** Excelente. He revisado tu currículum y es muy impresionante. Cuéntame, ¿qué te motivó a dejar tu posición actual?\n\n**Ana:** *Se inclina ligeramente hacia adelante* Bueno, llevo tres años como desarrolladora senior en mi empresa actual, pero siento que he alcanzado un techo. TechNova me ofrece la oportunidad de trabajar con tecnologías de vanguardia y liderar proyectos más desafiantes.\n\n**Carlos:** Me parece razonable. Veo que tienes experiencia en inteligencia artificial. ¿Podrías darnos un ejemplo específico de algún proyecto en el que hayas trabajado?\n\n**Ana:** Por supuesto. El año pasado lideré el desarrollo de un sistema de recomendación para e-commerce que aumentó las ventas en un 30%. Utilizamos algoritmos de deep learning y procesamiento de lenguaje natural.\n\n*Carlos toma notas mientras Ana habla.*\n\n**Carlos:** Impresionante. ¿Cómo manejas las situaciones de alta presión y plazos ajustados?\n\n**Ana:** *Sonríe con confianza* Creo en la planificación proactiva y la comunicación transparente. Cuando los plazos son ajustados, priorizo tareas, delego cuando es necesario y mantengo a todo el equipo informado sobre el progreso.\n\n**Carlos:** Perfecto. ¿Tienes alguna pregunta sobre el puesto o la empresa?\n\n**Ana:** Sí, me gustaría saber más sobre las oportunidades de crecimiento profesional y los proyectos en los que estaría trabajando inicialmente.\n\n**Carlos:** *Se relaja en su silla* Tenemos un programa de mentoría muy sólido y proyectos emocionantes en el área de IoT. Creo que serías una excelente adición al equipo."}
{"text": "# La Revolución de la Inteligencia Artificial en el Mundo Laboral\n\nLa inteligencia artificial (IA) está transformando radicalmente el panorama laboral global. Desde la automatización de tareas rutinarias hasta la creación de nuevas profesiones, esta tecnología está redefiniendo cómo trabajamos, qué trabajamos y dónde trabajamos.\n\n## El Impacto Actual de la IA\n\nEn la actualidad, la IA ya está presente en múltiples sectores. En la manufactura, los robots inteligentes han optimizado las líneas de producción, reduciendo errores humanos y aumentando la eficiencia. En el sector financiero, algoritmos sofisticados detectan fraudes en tiempo real y automatizar el procesamiento de préstamos.\n\nLa atención al cliente ha experimentado una revolución con los chatbots impulsados por IA, capaces de resolver consultas básicas 24/7. Estos sistemas liberan a los agentes humanos para enfocarse en problemas más complejos que requieren empatía y creatividad.\n\n## Trabajos en Riesgo vs Trabajos Emergentes\n\nLa automatización amenaza principalmente trabajos rutinarios y predecibles. Conductores, cajeros, operadores de call center y algunos roles administrativos enfrentan el riesgo de ser reemplazados. Sin embargo, esta transformación también está creando nuevas oportunidades laborales.\n\nLos especialistas en IA, científicos de datos, ingenieros de machine learning y especialistas en ética de IA están experimentando una demanda sin precedentes. Además, profesiones que requieren creatividad, pensamiento crítico y habilidades interpersonales se están volviendo más valiosas.\n\n## Adaptación y Reconversión Laboral\n\nLa clave para prosperar en esta nueva era es la adaptabilidad. Las empresas están invirtiendo en programas de reconversión laboral para ayudar a sus empleados a adquirir nuevas habilidades. La educación continua y el aprendizaje de por vida se han convertido en imperativos.\n\nGobiernos y organizaciones educativas están desarrollando programas específicos para enseñar habilidades digitales y competencias en IA. Países como Singapur y Estonia han implementado iniciativas nacionales de alfabetización digital.\n\n## El Futuro del Trabajo\n\nEl futuro no se trata de humanos versus máquinas, sino de humanos trabajando junto con máquinas. La colaboración humano-IA será la norma, donde cada parte contribuye con sus fortalezas únicas.\n\nLa IA maneja el procesamiento de datos, análisis predictivos y tareas repetitivas, mientras que los humanos aportan creatividad, juicio ético, inteligencia emocional y capacidad de innovación.\n\n## Conclusión\n\nLa revolución de la IA en el trabajo es inevitable y ya está en marcha. Aquellos que se adapten, aprendan y evolucionen con esta tecnología no solo sobrevivirán, sino que prosperarán. La clave está en abrazar el cambio, desarrollar nuevas competencias y ver la IA como un complemento, no como una amenaza."}
{"text": "```python\n#!/usr/bin/env python3\n\"\"\"\nSistema de Gestión de Biblioteca Simple\nManeja libros, usuarios y préstamos básicos\n\"\"\"\n\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\nimport json\n\nclass Libro:\n    \"\"\"Representa un libro en la biblioteca\"\"\"\n    \n    def __init__(self, isbn: str, titulo: str, autor: str, año: int):\n        self.isbn = isbn\n        self.titulo = titulo\n        self.autor = autor\n        self.año = año\n        self.disponible = True\n        self.fecha_devolucion = None\n    \n    def __str__(self):\n        estado = \"Disponible\" if self.disponible else f\"Prestado hasta {self.fecha_devolucion}\"\n        return f\"{self.titulo} - {self.autor} ({self.año}) [{estado}]\"\n\nclass Usuario:\n    \"\"\"Representa un usuario de la biblioteca\"\"\"\n    \n    def __init__(self, id_usuario: str, nombre: str, email: str):\n        self.id_usuario = id_usuario\n        self.nombre = nombre\n        self.email = email\n        self.libros_prestados: List[str] = []  # Lista de ISBNs\n        self.multas = 0.0\n    \n    def puede_tomar_prestamo(self) -> bool:\n        \"\"\"Verifica si el usuario puede tomar un préstamo\"\"\"\n        return len(self.libros_prestados) < 3 and self.multas < 50.0\n    \n    def __str__(self):\n        return f\"{self.nombre} ({self.id_usuario}) - Libros: {len(self.libros_prestados)}, Multas: ${self.multas:.2f}\"\n\nclass BibliotecaManager:\n    \"\"\"Sistema principal de gestión de biblioteca\"\"\"\n    \n    def __init__(self):\n        self.libros: Dict[str, Libro] = {}\n        self.usuarios: Dict[str, Usuario] = {}\n        self.historial_prestamos: List[Dict] = []\n    \n    def agregar_libro(self, libro: Libro) -> bool:\n        \"\"\"Agrega un nuevo libro al catálogo\"\"\"\n        try:\n            if libro.isbn in self.libros:\n                print(f\"Error: El libro con ISBN {libro.isbn} ya existe\")\n                return False\n            \n            self.libros[libro.isbn] = libro\n            print(f\"Libro '{libro.titulo}' agregado exitosamente\")\n            return True\n            \n        except Exception as e:\n            print(f\"Error al agregar libro: {e}\")\n            return False\n    \n    def registrar_usuario(self, usuario: Usuario) -> bool:\n        \"\"\"Registra un nuevo usuario\"\"\"\n        try:\n            if usuario.id_usuario in self.usuarios:\n                print(f\"Error: Usuario {usuario.id_usuario} ya existe\")\n                return False\n            \n            self.usuarios[usuario.id_usuario] = usuario\n            print(f\"Usuario '{usuario.nombre}' registrado exitosamente\")\n            return True\n            \n        except Exception as e:\n            print(f\"Error al registrar usuario: {e}\")\n            return False\n    \n    def prestar_libro(self, isbn: str, id_usuario: str, dias_prestamo: int = 14) -> bool:\n        \"\"\"Realiza un préstamo de libro\"\"\"\n        try:\n            # Validar existencia del libro y usuario\n            if isbn not in self.libros:\n                print(f\"Error: Libro con ISBN {isbn} no encontrado\")\n                return False\n            \n            if id_usuario not in self.usuarios:\n                print(f\"Error: Usuario {id_usuario} no encontrado\")\n                return False\n            \n            libro = self.libros[isbn]\n            usuario = self.usuarios[id_usuario]\n            \n            # Validar disponibilidad\n            if not libro.disponible:\n                print(f\"Error: El libro '{libro.titulo}' no está disponible\")\n                return False\n            \n            if not usuario.puede_tomar_prestamo():\n                print(f\"Error: Usuario '{usuario.nombre}' no puede tomar más préstamos\")\n                return False\n            \n            # Realizar préstamo\n            fecha_devolucion = datetime.now() + timedelta(days=dias_prestamo)\n            libro.disponible = False\n            libro.fecha_devolucion = fecha_devolucion\n            usuario.libros_prestados.append(isbn)\n            \n            # Registrar en historial\n            prestamo = {\n                'fecha': datetime.now().isoformat(),\n                'isbn': isbn,\n                'usuario': id_usuario,\n                'fecha_devolucion': fecha_devolucion.isoformat(),\n                'devuelto': False\n            }\n            self.historial_prestamos.append(prestamo)\n            \n            print(f\"Préstamo realizado: '{libro.titulo}' para {usuario.nombre}\")\n            print(f\"Fecha de devolución: {fecha_devolucion.strftime('%d/%m/%Y')}\")\n            return True\n            \n        except Exception as e:\n            print(f\"Error en préstamo: {e}\")\n            return False\n    \n    def devolver_libro(self, isbn: str, id_usuario: str) -> bool:\n        \"\"\"Procesa la devolución de un libro\"\"\"\n        try:\n            if isbn not in self.libros or id_usuario not in self.usuarios:\n                print(\"Error: Libro o usuario no encontrado\")\n                return False\n            \n            libro = self.libros[isbn]\n            usuario = self.usuarios[id_usuario]\n            \n            if isbn not in usuario.libros_prestados:\n                print(f\"Error: El usuario no tiene prestado este libro\")\n                return False\n            \n            # Calcular multa por retraso\n            if datetime.now() > libro.fecha_devolucion:\n                dias_retraso = (datetime.now() - libro.fecha_devolucion).days\n                multa = dias_retraso * 1.0  # $1 por día de retraso\n                usuario.multas += multa\n                print(f\"Multa aplicada: ${multa:.2f} por {dias_retraso} días de retraso\")\n            \n            # Procesar devolución\n            libro.disponible = True\n            libro.fecha_devolucion = None\n            usuario.libros_prestados.remove(isbn)\n            \n            # Actualizar historial\n            for prestamo in self.historial_prestamos:\n                if prestamo['isbn'] == isbn and prestamo['usuario'] == id_usuario and not prestamo['devuelto']:\n                    prestamo['devuelto'] = True\n                    prestamo['fecha_devolucion_real'] = datetime.now().isoformat()\n                    break\n            \n            print(f\"Libro '{libro.titulo}' devuelto exitosamente\")\n            return True\n            \n        except Exception as e:\n            print(f\"Error en devolución: {e}\")\n            return False\n    \n    def buscar_libros(self, termino: str) -> List[Libro]:\n        \"\"\"Busca libros por título o autor\"\"\"\n        resultados = []\n        termino_lower = termino.lower()\n        \n        for libro in self.libros.values():\n            if (termino_lower in libro.titulo.lower() or \n                termino_lower in libro.autor.lower()):\n                resultados.append(libro)\n        \n        return resultados\n    \n    def listar_libros_disponibles(self) -> List[Libro]:\n        \"\"\"Lista todos los libros disponibles\"\"\"\n        return [libro for libro in self.libros.values() if libro.disponible]\n    \n    def generar_reporte(self) -> Dict:\n        \"\"\"Genera un reporte del estado de la biblioteca\"\"\"\n        total_libros = len(self.libros)\n        libros_prestados = sum(1 for libro in self.libros.values() if not libro.disponible)\n        total_usuarios = len(self.usuarios)\n        multas_pendientes = sum(usuario.multas for usuario in self.usuarios.values())\n        \n        return {\n            'total_libros': total_libros,\n            'libros_disponibles': total_libros - libros_prestados,\n            'libros_prestados': libros_prestados,\n            'total_usuarios': total_usuarios,\n            'multas_pendientes': multas_pendientes,\n            'prestamos_activos': len([p for p in self.historial_prestamos if not p['devuelto']])\n        }\n\n# Ejemplo de uso\nif __name__ == \"__main__\":\n    # Crear sistema de biblioteca\n    biblioteca = BibliotecaManager()\n    \n    # Agregar algunos libros\n    libro1 = Libro(\"978-0135957059\", \"Clean Code\", \"Robert C. Martin\", 2008)\n    libro2 = Libro(\"978-0596009205\", \"Head First Design Patterns\", \"Eric Freeman\", 2004)\n    libro3 = Libro(\"978-0134685991\", \"Effective Java\", \"Joshua Bloch\", 2017)\n    \n    biblioteca.agregar_libro(libro1)\n    biblioteca.agregar_libro(libro2)\n    biblioteca.agregar_libro(libro3)\n    \n    # Registrar usuarios\n    usuario1 = Usuario(\"U001\", \"Ana García\", \"ana@email.com\")\n    usuario2 = Usuario(\"U002\", \"Carlos López\", \"carlos@email.com\")\n    \n    biblioteca.registrar_usuario(usuario1)\n    biblioteca.registrar_usuario(usuario2)\n    \n    # Realizar préstamos\n    biblioteca.prestar_libro(\"978-0135957059\", \"U001\")\n    biblioteca.prestar_libro(\"978-0596009205\", \"U002\")\n    \n    # Mostrar reporte\n    reporte = biblioteca.generar_reporte()\n    print(\"\\n=== REPORTE DE BIBLIOTECA ===\")\n    for key, value in reporte.items():\n        print(f\"{key.replace('_', ' ').title()}: {value}\")\n    \n    # Buscar libros\n    print(\"\\n=== BÚSQUEDA: 'java' ===\")\n    resultados = biblioteca.buscar_libros(\"java\")\n    for libro in resultados:\n        print(f\"- {libro}\")\n    \n    print(\"\\nSistema de biblioteca funcionando correctamente!\")\n```"}